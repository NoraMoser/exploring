{"version":3,"file":"static/js/836.b98eed4f.chunk.js","mappings":"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","sources":["components/FavoritesModal.tsx","components/FilterBar.tsx","components/Pagination.tsx","pages/Home.tsx","services/countriesAPI.ts"],"sourcesContent":["import React from \"react\";\nimport { useFavorites } from \"../contexts/FavoritesContext\";\n\ntype FavoritesModalProps = {\n  onClose: () => void;\n  //this function tells the modal whether to open or close\n};\n\nconst FavoritesModal: React.FC<FavoritesModalProps> = ({ onClose }) => {\n  //modal to show the favorites information\n  const { favorites, removeFavorite } = useFavorites();\n  //getting this from the context\n\n  return (\n    <div\n      className=\"modal-overlay\"\n      role=\"dialog\"\n      aria-modal=\"true\"\n      aria-labelledby=\"favorites-title\"\n    >\n      <div className=\"modal\">\n        <h2 id=\"favorites-title\">Your Exploring Wishlist</h2>\n\n        {favorites.length === 0 ? (\n          <p>No favorites yet.</p>\n        ) : (\n          <ul>\n            {favorites.map((country) => (\n              <li key={country.cca3}>\n                {`${country.name.common} `} \n                <button\n                  onClick={() => removeFavorite(country.cca3)}\n                  aria-label={`Remove ${country.name.common} from favorites`}\n                >\n                  ‚ùé\n                </button>\n              </li>\n            ))}\n          </ul>\n        )}\n\n        <button className=\"modal-close\" onClick={onClose} aria-label=\"Close favorites modal\">\n          x\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default FavoritesModal;\n","import React, { useState } from \"react\";\nimport FavoritesModal from \"./FavoritesModal\";\n\ntype FilterProps = {\n  setQuery: (query: string) => void;\n  //this sets the value from the input/search bar on the home screen nav bar\n  query: string;\n  //the value string from the search bar.  it was needed to filter the countries list so has been lifted to the parent\n};\n\nconst FilterBar: React.FC<FilterProps> = ({ setQuery, query }) => {\n  //the nav bar on the home page with a search in it so the user can search for countries and the title of the app\n\n  const [showModal, setModal] = useState(false);\n  //set state as a boolean and tell modal to open or close\n  return (\n    <header className=\"home-nav-bar\" role=\"banner\">\n      <button className=\"view-favorites\" onClick={() => setModal(true)}>View Favorites</button>\n      {showModal && <FavoritesModal onClose={() => setModal(false)} />}\n      <h1 className=\"title\">Exploring</h1>\n      {/* smaller for performance based on Lighthouse audit */}\n\n      <label htmlFor=\"country-search\" className=\"visually-hidden\">\n        Search for a country\n      </label>\n      <input\n        id=\"country-search\"\n        className=\"search\"\n        type=\"text\"\n        placeholder=\"Search countries...\"\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n        aria-label=\"Search countries\"\n      />\n    </header>\n  );\n};\n\nexport default FilterBar;\n","import React from \"react\";\nimport { Country } from \"../types/Country\";\n\ntype PaginationProps = {\n  currentPage: number;\n  //this is the current page the the user is looking at on the home screen\n  setCurrentPage: (currentPage: number) => void;\n  //this is so the user can change the currentpage state when the button is clicked\n  amtCountriesPerPage: number;\n  //this is a value that tells how many items in the list the user can see per page\n  filteredCountries: Country[];\n  //this shows the countries list that has been filtered by the search bar and also ordered alphabetically\n};\n\nconst Pagination: React.FC<PaginationProps> = ({\n  //this section has previous and next buttons and the user can see what page they are on\n  currentPage,\n  setCurrentPage,\n  amtCountriesPerPage,\n  filteredCountries,\n}) => {\n  const totalPages = Math.ceil(filteredCountries.length / amtCountriesPerPage);\n  //makes it easy to tell where i am gett\\ing the total pages from\n  const handlePrevious = () => setCurrentPage(currentPage - 1);\n  const handleNext = () => setCurrentPage(currentPage + 1);\n  //set current page on click\n  return (\n    <nav\n      className=\"pagination\"\n      role=\"navigation\"\n      aria-label=\"Country pagination\"\n    >\n      <button\n        onClick={handlePrevious}\n        disabled={currentPage === 1}\n        aria-label=\"Go to previous page\"\n      >\n        Previous\n      </button>\n\n      <span aria-live=\"polite\">\n        Page <strong>{currentPage}</strong> of <strong>{totalPages}</strong>\n      </span>\n\n      <button\n        onClick={handleNext}\n        disabled={currentPage === totalPages}\n        aria-label=\"Go to next page\"\n      >\n        Next\n      </button>\n    </nav>\n  );\n};\n\nexport default Pagination;\n","import React, { lazy, Suspense, useEffect, useMemo, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { fetchAllCountries } from \"../services/countriesAPI\";\n\n//components\nimport FilterBar from \"../components/FilterBar\";\nimport Pagination from \"../components/Pagination\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nconst CountriesTable = lazy(() => import(\"../components/CountriesTable\"));\n\nconst Home = () => {\n  //main page that shows the table the all the countries listed on it\n  const {\n    data: countries, //this is the entire list of countries in an array\n    isLoading,\n    error, //these two handle loading and error states\n  } = useQuery({\n    queryKey: [\"countries\"],\n    queryFn: fetchAllCountries,\n    //using react query here to fetch the data from the function in countriesapi\n  });\n  const [query, setQuery] = useState(\"\"); //this is the value from the search input\n  const [currentPage, setCurrentPage] = useState(1); //current page the user is on\n\n  const amtCountriesPerPage = 12;\n  const filteredCountries = useMemo(() => {\n    //this caches filtered countries so it will run only with a change of one of the vars in the dependency array\n    if (!countries) return [];\n\n    const sortedCountries = countries.sort((a, b) =>\n      a.name.common.localeCompare(b.name.common)\n    ); //this puts names of countries in alphabetical order\n\n    const filtered = query\n      ? sortedCountries.filter(\n          (country) =>\n            country.name.common\n              .toLowerCase()\n              .includes(query.trim().toLowerCase()) //no white space or upper case letters\n        )\n      : sortedCountries; //if the query is more than an empty string, we filter based on the countries that contain that letter\n\n    return filtered;\n  }, [countries, query]);\n\n  useEffect(() => {\n    setCurrentPage(1);\n  }, [query]); //if you are not on page one and try to search, it need to go back to page 1 or it won't work bc you might be on the wrong page to see the results\n\n  if (isLoading || !countries) return <p>Loading...</p>;\n  if (error) return <p>Error loading countries.</p>;\n\n  const handleSearchInput = (name: string) => {\n    //callback that changes squery state when the user searcches in the search bar\n    setQuery(name);\n  };\n\n  return (\n    <main className=\"home-div\">\n      <section aria-labelledby=\"filter-heading\">\n        <h2 id=\"filter-heading\" className=\"visually-hidden\">\n          Filter countries\n        </h2>\n        <ErrorBoundary>\n          <FilterBar query={query} setQuery={handleSearchInput} />\n        </ErrorBoundary>\n      </section>\n      {/* for the benefit on screen readers */}\n      <section aria-labelledby=\"countries-heading\" className=\"main-content\">\n        <Suspense fallback={<p aria-live=\"polite\">Loading countries...</p>}>\n          {/* help with speed by lazy loading and gives a fallback ui while loading*/}\n          <ErrorBoundary>\n            <CountriesTable\n              filteredCountries={filteredCountries}\n              currentPage={currentPage}\n              amtCountriesPerPage={amtCountriesPerPage}\n            />\n          </ErrorBoundary>\n        </Suspense>\n      </section>\n      <nav aria-label=\"Pagination navigation\">\n        <ErrorBoundary>\n          <Pagination\n            amtCountriesPerPage={amtCountriesPerPage}\n            currentPage={currentPage}\n            setCurrentPage={setCurrentPage}\n            filteredCountries={filteredCountries}\n          />\n        </ErrorBoundary>\n      </nav>\n    </main>\n  );\n};\n\nexport default Home;\n","import { Country } from \"../types/Country\";\n\nconst BASE_URL = \"https://restcountries.com/v3.1\";\n//you can find these endpoints at https://restcountries.com/#endpoints\n\n\n/**\n * get an array of all the countries from the rest countries api\n * @returns promise resolving to an array of objects.\n * @throws error if the request fails.\n */\nexport const fetchAllCountries = async (): Promise<Country[]> => { \n  const response = await fetch(`${BASE_URL}/all`);\n  if (!response.ok) {\n    throw new Error(\"Unable to fetch countries\");\n  }\n  return await response.json();\n};\n\n/**\n * get back an individual country per 3-letter code.\n * @param code - The country code (3 digits)\n * @returns promise resolving to a single object from the array.\n * @throws error if the request fails or country is not found.\n */\nexport const fetchCountryByCode = async (code: string): Promise<Country> => {\n  const response = await fetch(`${BASE_URL}/alpha/${code}`);\n  if (!response.ok) {\n    throw new Error(\"Unable to fetch country\");\n  }\n  const data = await response.json();\n  return data[0]; //return single item from the array\n};\n"],"names":["_ref","onClose","favorites","removeFavorite","useFavorites","_jsx","className","role","children","_jsxs","id","length","map","country","concat","name","common","onClick","cca3","setQuery","query","showModal","setModal","useState","FavoritesModal","htmlFor","type","placeholder","value","onChange","e","target","currentPage","setCurrentPage","amtCountriesPerPage","filteredCountries","totalPages","Math","ceil","handlePrevious","disabled","handleNext","CountriesTable","lazy","Home","data","countries","isLoading","error","useQuery","queryKey","queryFn","fetchAllCountries","useMemo","sortedCountries","sort","a","b","localeCompare","filter","toLowerCase","includes","trim","useEffect","ErrorBoundary","FilterBar","Suspense","fallback","Pagination","BASE_URL","async","response","fetch","ok","Error","json","fetchCountryByCode","code"],"sourceRoot":""}