{"version":3,"file":"static/js/986.6b9ca395.chunk.js","mappings":"6OAgBA,MA4CA,EA5C+CA,IAAkB,IAADC,EAAAC,EAAA,IAAhB,QAAEC,GAASH,EACzD,MAAMI,EAAO,IAAIC,IAAAA,MAAO,CACtBC,QAASC,EAAQ,KACjBC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,IACjBC,YAAa,CAAC,GAAI,IAClBC,UAAWJ,EAAQ,IACnBK,WAAY,CAAC,GAAI,MAInB,OAEEC,EAAAA,EAAAA,KAAA,WAAS,uBAAAC,OAAsBX,EAAQY,KAAKC,QAASC,UAEnDJ,EAAAA,EAAAA,KAACK,EAAAA,EAAa,CAAAD,UAEZE,EAAAA,EAAAA,MAACC,EAAAA,EAAY,CACXC,OAAQlB,EAAQmB,OAChBC,KAAM,EACNC,iBAAiB,EACjBC,UAAU,gBACV,cAAY,QAAQR,SAAA,EAGpBJ,EAAAA,EAAAA,KAACa,EAAAA,EAAS,CACRC,YAAY,wFACZC,IAAI,wDAINf,EAAAA,EAAAA,KAACgB,EAAAA,EAAM,CAACC,SAAU3B,EAAQmB,OAAQlB,KAAMA,EAAKa,UAC3CE,EAAAA,EAAAA,MAACY,EAAAA,EAAK,CAAAd,SAAA,EACJJ,EAAAA,EAAAA,KAAA,UAAAI,SAASd,EAAQY,KAAKC,UACtBH,EAAAA,EAAAA,KAAA,SAAM,YACwB,QAArBZ,EAAgB,QAAhBC,EAACC,EAAQ6B,eAAO,IAAA9B,OAAA,EAAfA,EAAkB,UAAE,IAAAD,EAAAA,EAAI,iBAKlC,ECbd,EAjCgED,IAGzD,IAADiC,EAAAC,EAAA,IAH2D,QAE/D/B,GACDH,EACC,MAAMmC,GAAWC,EAAAA,EAAAA,MAEjB,OACEvB,EAAAA,EAAAA,KAAA,UAAQY,UAAU,yBAAyBY,KAAK,SAAQpB,UACtDE,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EACEJ,EAAAA,EAAAA,KAAA,UACEyB,QAASA,IAAMH,EAAS,KACxB,aAAW,2BACXI,MAAM,UAAStB,SAChB,YAIDJ,EAAAA,EAAAA,KAAA,MAAAI,SAAKd,EAAQY,KAAKC,UAElBH,EAAAA,EAAAA,KAAA,OACEY,UAAU,aACVe,IAAkB,QAAfP,EAAE9B,EAAQsC,aAAK,IAAAR,OAAA,EAAbA,EAAeS,IACpBC,IACe,QAAbT,EAAA/B,EAAQsC,aAAK,IAAAP,GAAbA,EAAeS,IACXxC,EAAQsC,MAAME,IAAG,WAAA7B,OACNX,EAAQY,KAAKC,cAI3B,E,aC/Bb,MAoGA,EApG6DhB,IAAkB,IAAD4C,EAAA3C,EAAAC,EAAA2C,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,IAAhB,QAAEjD,GAASH,EAEvE,MAAM,YAAEqD,EAAW,UAAEC,EAAS,eAAEC,IAAmBC,EAAAA,EAAAA,MAG7CC,EAAaH,EAAUI,MAAMC,GAASA,EAAKC,OAASzD,EAAQyD,OAGlE,OACEzC,EAAAA,EAAAA,MAAA,WACEM,UAAU,6BACV,kBAAgB,0BAAyBR,SAAA,EAEzCE,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EACEJ,EAAAA,EAAAA,KAAA,OACAY,UAAU,qBACRe,IAAuB,QAApBI,EAAEzC,EAAQ0D,kBAAU,IAAAjB,OAAA,EAAlBA,EAAoBF,IACzBC,IAAG,oCAAA7B,OAAsCX,EAAQY,KAAKC,WAGxDG,EAAAA,EAAAA,MAAA,MAAI2C,GAAG,0BAAyB7C,SAAA,EAC9BJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,oBACPd,EAAQY,KAAKgD,aAGhB5C,EAAAA,EAAAA,MAAA,MAAAF,SAAA,EACEJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,cACa,QADKhB,EACV,QADUC,EACzBC,EAAQ6B,eAAO,IAAA9B,OAAA,EAAfA,EAAkB,UAAE,IAAAD,EAAAA,EAAI,UAG3BkB,EAAAA,EAAAA,MAAA,MAAAF,SAAA,EACEJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,aACO,QADU4B,EACxB1C,EAAQ6D,cAAM,IAAAnB,EAAAA,EAAI,UAGrB1B,EAAAA,EAAAA,MAAA,MAAAF,SAAA,EACEJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,iBACU,QADW6B,EAC5B3C,EAAQ8D,iBAAS,IAAAnB,EAAAA,EAAI,UAGxB3B,EAAAA,EAAAA,MAAA,KAAAF,SAAA,EACEJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,gBACuB,QADH8B,EACT,QADSC,EAC3B7C,EAAQ+D,kBAAU,IAAAlB,OAAA,EAAlBA,EAAoBmB,KAAK,aAAK,IAAApB,EAAAA,EAAI,aAIvC5B,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EACEE,EAAAA,EAAAA,MAAA,KAAAF,SAAA,EACEJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,gBACPd,EAAQiE,UACLC,OAAOC,OAAOnE,EAAQiE,WAAWD,KAAK,MACtC,UAGNhD,EAAAA,EAAAA,MAAA,KAAAF,SAAA,EACEJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,iBAC6B,QADRgC,EACV,QADUC,EAC5B/C,EAAQoE,kBAAU,IAAArB,OAAA,EAAlBA,EAAoBsB,wBAAgB,IAAAvB,EAAAA,EAAI,UAG3C9B,EAAAA,EAAAA,MAAA,KAAAF,SAAA,EACEJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,WACPd,EAAQsE,KAAI,GAAA3D,OAAMX,EAAQsE,KAAKD,iBAAgB,WAAS,SAI1DrE,EAAQuE,WACPL,OAAOC,OAAOnE,EAAQuE,YAAYC,KAAI,CAACC,EAAUC,KAC/C1D,EAAAA,EAAAA,MAAA,KAAAF,SAAA,EACEJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,eACP2D,EAAS7D,KAAK,KAAG6D,EAASE,OAAO,MAF5BD,MAMV1D,EAAAA,EAAAA,MAAA,KAAAF,SAAA,EACEJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,cAAkB,WAI9BE,EAAAA,EAAAA,MAAA,KAAAF,SAAA,EACEJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,kBACsB,QADAkC,EACZ,QADYC,EAC7BjD,EAAQ4E,iBAAS,IAAA3B,OAAA,EAAjBA,EAAmBe,KAAK,aAAK,IAAAhB,EAAAA,EAAI,aAItChC,EAAAA,EAAAA,MAAA,OAAKM,UAAU,0BAAyBR,SAAA,EACtCE,EAAAA,EAAAA,MAAA,QAAM2C,GAAG,iBAAgB7C,SAAA,CAAEwC,EAAa,wBAA0B,mBAAoB,QACtF5C,EAAAA,EAAAA,KAAA,UACEyB,QAASA,KACPmB,EAAaF,EAAepD,EAAQyD,MAAQP,EAAYlD,EAAQ,EAElE,kBAAgB,iBAChB,eAAcsD,EAAWxC,SAExBwC,EAAa,eAAO,sBAGjB,E,aC3Fd,MAkDA,EAlDsBuB,KAEpB,MAAM,KAAEC,IAASC,EAAAA,EAAAA,MAGfC,KAAMhF,EAAO,UACbiF,EAAS,MACTC,IACEC,EAAAA,EAAAA,GAAS,CACXC,SAAU,CAAC,UAAWN,GACtBO,QAASA,KAAMC,EAAAA,EAAAA,GAAmBR,GAClCS,UAAWT,IAGb,OAAIG,IAAcjF,GAAgBU,EAAAA,EAAAA,KAAA,KAAG,YAAU,SAAQI,SAAC,eACpDoE,GAAcxE,EAAAA,EAAAA,KAAA,KAAGwB,KAAK,QAAOpB,SAAC,8BAGhCE,EAAAA,EAAAA,MAAA,QAAAF,SAAA,EAEEE,EAAAA,EAAAA,MAAA,WAAS,kBAAgB,iBAAgBF,SAAA,EACvCJ,EAAAA,EAAAA,KAAA,MAAIiD,GAAG,iBAAiBrC,UAAU,kBAAiBR,SAAC,4BAGpDJ,EAAAA,EAAAA,KAACK,EAAAA,EAAa,CAAAD,UACZJ,EAAAA,EAAAA,KAAC8E,EAAmB,CAACxF,QAASA,UAIlCgB,EAAAA,EAAAA,MAAA,WAAS,kBAAgB,cAAaF,SAAA,EACpCJ,EAAAA,EAAAA,KAAA,MAAIiD,GAAG,cAAcrC,UAAU,kBAAiBR,SAAC,0BAGjDJ,EAAAA,EAAAA,KAACK,EAAAA,EAAa,CAAAD,UACZJ,EAAAA,EAAAA,KAAC+E,EAAW,CAACzF,QAASA,UAI1BgB,EAAAA,EAAAA,MAAA,WAAS,kBAAgB,eAAcF,SAAA,EACrCJ,EAAAA,EAAAA,KAAA,MAAIiD,GAAG,eAAerC,UAAU,kBAAiBR,SAAC,qBAGlDJ,EAAAA,EAAAA,KAACK,EAAAA,EAAa,CAAAD,UACZJ,EAAAA,EAAAA,KAACgF,EAAkB,CAAC1F,QAASA,WAG5B,C,yCCzDX,MAAM2F,EAAW,iCASJC,EAAoBC,UAC/B,MAAMC,QAAiBC,MAAM,GAADpF,OAAIgF,EAAQ,SACxC,IAAKG,EAASE,GACZ,MAAM,IAAIC,MAAM,6BAElB,aAAaH,EAASI,MAAM,EASjBZ,EAAqBO,UAChC,MAAMC,QAAiBC,MAAM,GAADpF,OAAIgF,EAAQ,WAAAhF,OAAUmE,IAClD,IAAKgB,EAASE,GACZ,MAAM,IAAIC,MAAM,2BAGlB,aADmBH,EAASI,QAChB,EAAE,C","sources":["components/CountryMaps.tsx","components/CountryDetailHeader.tsx","components/CountryDetailInfo.tsx","pages/CountryDetail.tsx","services/countriesAPI.ts"],"sourcesContent":["import React from \"react\";\nimport { Country } from \"../types/Country\";\n\n// all leaflet imports\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\"; //visuals for leaflet\n// You can find documentation here https://react-leaflet.js.org/\nimport L from \"leaflet\";\nimport ErrorBoundary from \"./ErrorBoundary\";\n//the L is so I can get the leaflet icon for the marker\n\ntype CountryMapProps = {\n  country: Country;\n  //single country object from the array of countries\n};\n\nconst CountryMaps: React.FC<CountryMapProps> = ({ country }) => {\n  const icon = new L.Icon({\n    iconUrl: require(\"leaflet/dist/images/marker-icon.png\"), //icon location\n    iconSize: [25, 41], //icon ize\n    iconAnchor: [12, 41], //what part of the icon touches the location of the whole icon (so the point)\n    popupAnchor: [1, -34], // where the popup opens when you click the icon\n    shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\"), //the shadow for the icon so it looks 3d\n    shadowSize: [41, 41], //shadow size\n  });\n  //This was all bc the leaflet marker icon did not natively work for me - you can also use a different/custom icon\n\n  return (\n    // section it out for screen readers and just good readability in general\n    <section aria-label={`Map of ${country.name.common}`}>\n      {/* These are all leaflet items and you  can find them in the documentation.  a leaflet map is rendered in the container. the scrollwheelzoom is set to false here to prevent scrolling. center and zoom are both visual so it tells us where we will see the map. */}\n      <ErrorBoundary>\n        {/* in case there is an error with the map */}\n        <MapContainer\n          center={country.latlng}\n          zoom={5}\n          scrollWheelZoom={false}\n          className=\"map-container\"\n          aria-hidden=\"false\" // the map is not hidden\n        >\n          {/* Thia shows the maps background tiles using open street map */}\n          <TileLayer\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n\n          {/* shows where the marker will exactly touch the map */}\n          <Marker position={country.latlng} icon={icon}>\n            <Popup>\n              <strong>{country.name.common}</strong>\n              <br />\n              Capital: {country.capital?.[0] ?? \"N/A\"}\n            </Popup>\n          </Marker>\n        </MapContainer>\n      </ErrorBoundary>\n    </section>\n  );\n};\n\nexport default CountryMaps;\n","import React from \"react\";\nimport { Country } from \"../types/Country\";\nimport { useNavigate } from \"react-router-dom\";\n//how react-router-dom navigates from one screen to the other\n\ntype CountryDetailHeaderProps = {\n  country: Country;\n  //single country object from the array of countries\n};\n\nconst CountryDetailHeader: React.FC<CountryDetailHeaderProps> = ({\n  //this is the nav bar on the individual country page\n  country,\n}) => {\n  const navigate = useNavigate();\n  //this is part of react router so we can go back to the homepage\n  return (\n    <header className=\"country-detail-nav-bar\" role=\"banner\">\n      <div>\n        <button\n          onClick={() => navigate(\"/\")}\n          aria-label=\"Go back to the home page\"\n          title=\"Go back\"\n        >\n          ‚Üê\n        </button>\n\n        <h1>{country.name.common}</h1>\n\n        <img\n          className=\"flag-image\"\n          src={country.flags?.svg}\n          alt={\n            country.flags?.alt\n              ? country.flags.alt\n              : `Flag of ${country.name.common}` //if the flag image is there, we have the regular alt describing it. if not, we say flag of wharever country in its placce.\n          }\n        />\n      </div>\n    </header>\n  );\n};\n\nexport default CountryDetailHeader;\n","import React from \"react\";\nimport { Country } from \"../types/Country\";\nimport { useFavorites } from \"../contexts/FavoritesContext\";\n\ntype CountryDetailInfoProps = {\n  country: Country;\n  //single country object from the array of countries\n};\nconst CountryDetailInfos: React.FC<CountryDetailInfoProps> = ({ country }) => {\n  //gives the countries info that is given from the api\n  const { addFavorite, favorites, removeFavorite } = useFavorites();\n  //so we are getting these because we defined it in the context\n\n  const isFavorite = favorites.some((item) => item.cca3 === country.cca3);\n  //basically checking that the new country is included> yay or nay\n\n  return (\n    <section\n      className=\"country-detail-information\"\n      aria-labelledby=\"country-details-heading\"\n    >\n      <div>\n        <img\n        className=\"coat-of-arms-image\"\n          src={country.coatOfArms?.svg}\n          alt={`The coat of arms for the country ${country.name.common}`}\n        />\n\n        <h2 id=\"country-details-heading\">\n          <strong>Official Name: </strong>\n          {country.name.official}\n        </h2>\n\n        <h3>\n          <strong>Capital: </strong>\n          {country.capital?.[0] ?? \"N/A\"}\n        </h3>\n\n        <h3>\n          <strong>Region: </strong>\n          {country.region ?? \"N/A\"}\n        </h3>\n\n        <h4>\n          <strong>Sub-Region: </strong>\n          {country.subregion ?? \"N/A\"}\n        </h4>\n\n        <p>\n          <strong>Continent: </strong>\n          {country.continents?.join(\", \") ?? \"N/A\"}\n        </p>\n      </div>\n\n      <div>\n        <p>\n          <strong>Languages: </strong>\n          {country.languages\n            ? Object.values(country.languages).join(\", \")\n            : \"N/A\"}\n        </p>\n\n        <p>\n          <strong>Population: </strong>\n          {country.population?.toLocaleString() ?? \"N/A\"}\n        </p>\n\n        <p>\n          <strong>Area: </strong>\n          {country.area ? `${country.area.toLocaleString()} km¬≤` : \"N/A\"}\n        </p>\n\n        {/* loop through the currency object and show name and symbol */}\n        {country.currencies ? (\n          Object.values(country.currencies).map((currency, index) => (\n            <p key={index}>\n              <strong>Currency: </strong>\n              {currency.name} ({currency.symbol})\n            </p>\n          ))\n        ) : (\n          <p>\n            <strong>Currency:</strong> N/A\n          </p>\n        )}\n\n        <p>\n          <strong>Timezone(s): </strong>\n          {country.timezones?.join(\", \") ?? \"N/A\"}\n        </p>\n      </div>\n\n      <div className=\"favorite-button-wrapper\">\n        <span id=\"favorite-label\">{isFavorite ? \"Remove from Favorites\" : \"Add to Favorites\" } </span>\n        <button\n          onClick={() => {\n            isFavorite ? removeFavorite(country.cca3) : addFavorite(country);\n          }}\n          aria-labelledby=\"favorite-label\"\n          aria-pressed={isFavorite}\n        >\n          {isFavorite ? \"ü©∂\" : \"‚ù§Ô∏è\"}\n        </button>\n      </div>\n    </section>\n  );\n};\n\nexport default CountryDetailInfos;\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchCountryByCode } from \"../services/countriesAPI\";\n\n//components\nimport CountryMaps from \"../components/CountryMaps\";\nimport CountryDetailHeader from \"../components/CountryDetailHeader\";\nimport CountryDetailInfos from \"../components/CountryDetailInfo\";\n\nimport { useQuery } from \"@tanstack/react-query\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\n//https://tanstack.com/query/latest/docs/framework/react/overview for fetching data from the api\n\nconst CountryDetail = () => {\n  //this is the detail page for each country\n  const { code } = useParams<{ code: string }>();\n  //get code out of the url\n  const {\n    data: country, //this is a single country object\n    isLoading,\n    error, //loading and error states for data retrieval\n  } = useQuery({\n    queryKey: [\"country\", code], //the key that react query requires\n    queryFn: () => fetchCountryByCode(code!), //the ! is a non null assertion operator (only do this if you know there is a value)\n    enabled: !!code, //this makes react query only run if you have data in code so no errors\n  });\n\n  if (isLoading || !country) return <p aria-live=\"polite\">Loading...</p>; //had to do this bc country isn't immediately available to pass as a prop\n  if (error) return <p role=\"alert\">Error loading countries.</p>; //fallback ui for if there is an error\n\n  return (\n    <main>\n      {/* sectioning these out for the sake of screen readers */}\n      <section aria-labelledby=\"country-header\">\n        <h1 id=\"country-header\" className=\"visually-hidden\">\n          Country Details Header\n        </h1>\n        <ErrorBoundary>\n          <CountryDetailHeader country={country} />\n        </ErrorBoundary>\n      </section>\n\n      <section aria-labelledby=\"country-map\">\n        <h2 id=\"country-map\" className=\"visually-hidden\">\n          Country location map\n        </h2>\n        <ErrorBoundary>\n          <CountryMaps country={country} />\n        </ErrorBoundary>\n      </section>\n\n      <section aria-labelledby=\"country-info\">\n        <h2 id=\"country-info\" className=\"visually-hidden\">\n          Country details\n        </h2>\n        <ErrorBoundary>\n          <CountryDetailInfos country={country} />\n        </ErrorBoundary>\n      </section>\n    </main>\n  );\n};\n\nexport default CountryDetail;\n","import { Country } from \"../types/Country\";\n\nconst BASE_URL = \"https://restcountries.com/v3.1\";\n//you can find these endpoints at https://restcountries.com/#endpoints\n\n\n/**\n * get an array of all the countries from the rest countries api\n * @returns promise resolving to an array of objects.\n * @throws error if the request fails.\n */\nexport const fetchAllCountries = async (): Promise<Country[]> => { \n  const response = await fetch(`${BASE_URL}/all`);\n  if (!response.ok) {\n    throw new Error(\"Unable to fetch countries\");\n  }\n  return await response.json();\n};\n\n/**\n * get back an individual country per 3-letter code.\n * @param code - The country code (3 digits)\n * @returns promise resolving to a single object from the array.\n * @throws error if the request fails or country is not found.\n */\nexport const fetchCountryByCode = async (code: string): Promise<Country> => {\n  const response = await fetch(`${BASE_URL}/alpha/${code}`);\n  if (!response.ok) {\n    throw new Error(\"Unable to fetch country\");\n  }\n  const data = await response.json();\n  return data[0]; //return single item from the array\n};\n"],"names":["_ref","_country$capital$","_country$capital","country","icon","L","iconUrl","require","iconSize","iconAnchor","popupAnchor","shadowUrl","shadowSize","_jsx","concat","name","common","children","ErrorBoundary","_jsxs","MapContainer","center","latlng","zoom","scrollWheelZoom","className","TileLayer","attribution","url","Marker","position","Popup","capital","_country$flags","_country$flags2","navigate","useNavigate","role","onClick","title","src","flags","svg","alt","_country$coatOfArms","_country$region","_country$subregion","_country$continents$j","_country$continents","_country$population$t","_country$population","_country$timezones$jo","_country$timezones","addFavorite","favorites","removeFavorite","useFavorites","isFavorite","some","item","cca3","coatOfArms","id","official","region","subregion","continents","join","languages","Object","values","population","toLocaleString","area","currencies","map","currency","index","symbol","timezones","CountryDetail","code","useParams","data","isLoading","error","useQuery","queryKey","queryFn","fetchCountryByCode","enabled","CountryDetailHeader","CountryMaps","CountryDetailInfos","BASE_URL","fetchAllCountries","async","response","fetch","ok","Error","json"],"sourceRoot":""}